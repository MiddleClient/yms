import discord
from discord.ext import commands
from discord import app_commands
import keep_alive
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
bot = commands.Bot(command_prefix='/', intents=intents)

# –¶–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö embeds
EMBED_COLOR = discord.Color.from_rgb(113, 8, 211)  # #7108d3

# --- –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ ---
class CityMenu(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(
                label="üé´ –ü–ª–∞–≥–∏–Ω –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç",
                description="–ó–∞–∫–∞–∑ –ø–ª–∞–≥–∏–Ω–∞ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç"
            ),
            discord.SelectOption(
                label="ü§ñ –î—Å –±–æ—Ç",
                description="–ó–∞–∫–∞–∑ –¥–∏—Å–∫–æ—Ä–¥ –±–æ—Ç–∞"
            ),
            discord.SelectOption(
                label="ü§ñ –¢–≥ –±–æ—Ç",
                description="–ó–∞–∫–∞–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"
            ),
            discord.SelectOption(
                label="‚öôÔ∏è –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                description="–ó–∞–∫–∞–∑ —Å–±–æ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–∞"
            )
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", options=options, custom_id="city_menu_select")

    async def callback(self, interaction: discord.Interaction):
        if self.values[0] == "üé´ –ü–ª–∞–≥–∏–Ω –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç":
            await interaction.response.send_modal(CityApplicationModal())
        elif self.values[0] == "ü§ñ –î—Å –±–æ—Ç":
            await interaction.response.send_modal(DiscordBotApplicationModal())
        elif self.values[0] == "ü§ñ –¢–≥ –±–æ—Ç":
            await interaction.response.send_modal(TelegramBotApplicationModal())
        elif self.values[0] == "‚öôÔ∏è –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞":
            await interaction.response.send_modal(ServerBuildApplicationModal())

class CityMenuView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(CityMenu())

# --- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ ---
class CityApplicationModal(discord.ui.Modal, title="–ü–ª–∞–≥–∏–Ω –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç"):
    username = discord.ui.TextInput(
        label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞",
        style=discord.TextStyle.short
    )
    hours_played = discord.ui.TextInput(
        label="–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω—ë–º (–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≤ —Ç–∏–∫–µ—Ç–µ)",
        placeholder="–û–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
        style=discord.TextStyle.short
    )
    plugin_version = discord.ui.TextInput(
        label="–ö–∞–∫–∞—è –≤–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å?",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ø–ª–∞–≥–∏–Ω–∞.",
        style=discord.TextStyle.short
    )
    core_name = discord.ui.TextInput(
        label="–ù–∞–∑–≤–∞–Ω–∏–µ —è–¥—Ä–∞",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–¥—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Spigot, Paper, Bukkit)",
        style=discord.TextStyle.short
    )
    java_version = discord.ui.TextInput(
        label="–ö–∞–∫–∞—è –≤–µ—Ä—Å–∏—è Java —É —Å–µ—Ä–≤–µ—Ä–∞?",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é Java (–Ω–∞–ø—Ä–∏–º–µ—Ä, Java 8, Java 11, Java 17)",
        style=discord.TextStyle.short
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()  # –û—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–≤–µ—Ç

            guild = interaction.guild
            applicant = interaction.user

            category = discord.utils.get(guild.categories, name="üíº ‚Ä¢ –¢–∏–∫–µ—Ç—ã")
            if not category:
                category = await guild.create_category("üíº ‚Ä¢ –¢–∏–∫–µ—Ç—ã")

            ticket_channel = await guild.create_text_channel(
                name=f"—Ç–∏–∫–µ—Ç-{applicant.name}",
                category=category
            )
            await ticket_channel.set_permissions(guild.default_role, view_channel=False)
            await ticket_channel.set_permissions(applicant, view_channel=True, send_messages=True, read_message_history=True)

            embed = discord.Embed(
                title="–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!",
                color=EMBED_COLOR
            )
            embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞", value=self.username.value, inline=False)
            embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=self.hours_played.value, inline=False)
            embed.add_field(name="–í–µ—Ä—Å–∏—è –ø–ª–∞–≥–∏–Ω–∞", value=self.plugin_version.value, inline=False)
            embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ —è–¥—Ä–∞", value=self.core_name.value, inline=False)
            embed.add_field(name="–í–µ—Ä—Å–∏—è Java", value=self.java_version.value, inline=False)
            embed.set_footer(text=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {applicant}")

            view = ApplicationResponseView(ticket_channel)
            await ticket_channel.send(embed=embed, view=view)

            await interaction.followup.send(
                f"–í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {ticket_channel.mention}. –ü–µ—Ä–µ–π–¥–∏—Ç–µ —Ç—É–¥–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                ephemeral=True
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
            await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", ephemeral=True)

class DiscordBotApplicationModal(discord.ui.Modal, title="–î—Å –±–æ—Ç"):
    usernames = discord.ui.TextInput(
        label="–û–ø–∏—Å–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∏–∫–µ—Ç–µ)",
        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞",
        style=discord.TextStyle.short
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()  # –û—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–≤–µ—Ç

            guild = interaction.guild
            applicant = interaction.user

            category = discord.utils.get(guild.categories, name="üíº ‚Ä¢ –¢–∏–∫–µ—Ç—ã")
            if not category:
                category = await guild.create_category("üíº ‚Ä¢ –¢–∏–∫–µ—Ç—ã")

            test_channel = await guild.create_text_channel(
                name=f"—Ç–∏–∫–µ—Ç-{applicant.name}",
                category=category
            )
            await test_channel.set_permissions(guild.default_role, view_channel=False)
            await test_channel.set_permissions(applicant, view_channel=True, send_messages=True, read_message_history=True)

            embed = discord.Embed(
                title="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!",
                color=EMBED_COLOR
            )
            embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=self.usernames.value, inline=False)
            embed.set_footer(text=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {applicant}")

            view = ApplicationResponseView(test_channel)
            await test_channel.send(embed=embed, view=view)

            await interaction.followup.send(
                f"–í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {test_channel.mention}. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ —Ç—É–¥–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                ephemeral=True
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
            await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", ephemeral=True)

class TelegramBotApplicationModal(discord.ui.Modal, title="–¢–≥ –±–æ—Ç"):
    usernames = discord.ui.TextInput(
        label="–û–ø–∏—Å–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∏–∫–µ—Ç–µ)",
        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞",
        style=discord.TextStyle.short
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()  # –û—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–≤–µ—Ç

            guild = interaction.guild
            applicant = interaction.user

            category = discord.utils.get(guild.categories, name="üíº ‚Ä¢ –¢–∏–∫–µ—Ç—ã")
            if not category:
                category = await guild.create_category("üíº ‚Ä¢ –¢–∏–∫–µ—Ç—ã")

            test_channel = await guild.create_text_channel(
                name=f"—Ç–∏–∫–µ—Ç-{applicant.name}",
                category=category
            )
            await test_channel.set_permissions(guild.default_role, view_channel=False)
            await test_channel.set_permissions(applicant, view_channel=True, send_messages=True, read_message_history=True)

            embed = discord.Embed(
                title="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!",
                color=EMBED_COLOR
            )
            embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=self.usernames.value, inline=False)
            embed.set_footer(text=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {applicant}")

            view = ApplicationResponseView(test_channel)
            await test_channel.send(embed=embed, view=view)

            await interaction.followup.send(
                f"–í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {test_channel.mention}. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ —Ç—É–¥–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                ephemeral=True
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
            await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", ephemeral=True)

class ServerBuildApplicationModal(discord.ui.Modal, title="–°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"):
    build_name = discord.ui.TextInput(
        label="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏",
        style=discord.TextStyle.short
    )
    build_description = discord.ui.TextInput(
        label="–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–±–æ—Ä–∫–µ (–º–æ–∂–Ω–æ –≤ —Ç–∏–∫–µ—Ç–µ)",
        placeholder="–û–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª",
        style=discord.TextStyle.long
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()  # –û—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–≤–µ—Ç

            guild = interaction.guild
            applicant = interaction.user

            category = discord.utils.get(guild.categories, name="üíº ‚Ä¢ –¢–∏–∫–µ—Ç—ã")
            if not category:
                category = await guild.create_category("üíº ‚Ä¢ –¢–∏–∫–µ—Ç—ã")

            ticket_channel = await guild.create_text_channel(
                name=f"—Ç–∏–∫–µ—Ç-{applicant.name}",
                category=category
            )
            await ticket_channel.set_permissions(guild.default_role, view_channel=False)
            await ticket_channel.set_permissions(applicant, view_channel=True, send_messages=True, read_message_history=True)

            embed = discord.Embed(
                title="–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!",
                color=EMBED_COLOR
            )
            embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏", value=self.build_name.value, inline=False)
            embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=self.build_description.value, inline=False)
            embed.set_footer(text=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {applicant}")

            view = ApplicationResponseView(ticket_channel)
            await ticket_channel.send(embed=embed, view=view)

            await interaction.followup.send(
                f"–í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {ticket_channel.mention}. –ü–µ—Ä–µ–π–¥–∏—Ç–µ —Ç—É–¥–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                ephemeral=True
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
            await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", ephemeral=True)

# --- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∏–∫–µ—Ç–∞–º–∏ (/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å/–∑–∞–∫—Ä—ã—Ç—å) ---
class ApplicationResponseView(discord.ui.View):
    def __init__(self, ticket_channel):
        super().__init__(timeout=None)
        self.ticket_channel = ticket_channel

    @discord.ui.button(label="–ó–∞–≤–µ—Ä—à–∏—Ç—å", style=discord.ButtonStyle.success, custom_id="approve_button")
    async def approve(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not (interaction.user.guild_permissions.administrator or
                any(role.name in ["üëë‚îÉOwner", "–ê—Ñ–≥–∞–Ω–µ—Ü"] for role in interaction.user.roles)):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫.", ephemeral=True)
            return

        guild = interaction.guild
        applicant = next(
            (member for member in interaction.channel.overwrites if isinstance(member, discord.Member)), None)

        if applicant:
            resident_role = discord.utils.get(guild.roles, name="‚≠ê‚îÉ–ó–∞–∫–∞–∑—á–∏–∫")
            guest_role = discord.utils.get(guild.roles, name="‚ö°‚îÉ–ì–æ—Å—Ç—å")

            if resident_role:
                await applicant.add_roles(resident_role)
            if guest_role:
                await applicant.remove_roles(guest_role)

        await interaction.response.send_message("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.", ephemeral=True)
        await self.ticket_channel.delete()

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=discord.ButtonStyle.danger, custom_id="reject_button")
    async def reject(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not (interaction.user.guild_permissions.administrator or
                any(role.name in ["üëë‚îÉOwner", "–ê—Ñ–≥–∞–Ω–µ—Ü"] for role in interaction.user.roles)):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.", ephemeral=True)
            return

        await interaction.response.send_message("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.", ephemeral=True)
        await self.ticket_channel.delete()

class CloseTicketView(discord.ui.View):
    def __init__(self, ticket_channel):
        super().__init__(timeout=None)
        self.ticket_channel = ticket_channel

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=discord.ButtonStyle.danger, custom_id="close_ticket_button")
    async def close(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞.", ephemeral=True)
            return

        await interaction.response.send_message("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.", ephemeral=True)
        await self.ticket_channel.delete()

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é ---
@bot.command(name="—Å–æ–∑–¥–∞—Ç—å_–º–µ–Ω—é")
@commands.has_permissions(administrator=True)
async def create_menu(ctx):
    embed = discord.Embed(
        title="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑",
        description=(
            "**–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è**\n\n"
            "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!*"
        ),
        color=EMBED_COLOR
    )
    view = CityMenuView()
    await ctx.send(embed=embed, view=view)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}!")

    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

    bot.add_view(CityMenuView())

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
keep_alive.keep_alive()

bot.run(os.environ.get('TOKEN'), reconnect=True)
